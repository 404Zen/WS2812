


ARM Macro Assembler    Page 1 


    1 00000000         ;
    2 00000000         ;*******************************************************
                       *************************************************
    3 00000000         ;                                                uC/OS-I
                       II
    4 00000000         ;                                          The Real-Time
                        Kernel
    5 00000000         ;
    6 00000000         ;
    7 00000000         ;                           (c) Copyright 2009-2010; Mic
                       rium, Inc.; Weston, FL
    8 00000000         ;                    All rights reserved.  Protected by 
                       international copyright laws.
    9 00000000         ;
   10 00000000         ;                                           ARM Cortex-M
                       3 Port
   11 00000000         ;
   12 00000000         ; File      : OS_CPU_A.ASM
   13 00000000         ; Version   : V3.01.2
   14 00000000         ; By        : JJL
   15 00000000         ;             BAN
   16 00000000         ;
   17 00000000         ; For       : ARMv7M Cortex-M3
   18 00000000         ; Mode      : Thumb2
   19 00000000         ; Toolchain : RealView Development Suite
   20 00000000         ;             RealView Microcontroller Development Kit (
                       MDK)
   21 00000000         ;             ARM Developer Suite (ADS)
   22 00000000         ;             Keil uVision
   23 00000000         ;*******************************************************
                       *************************************************
   24 00000000         ;
   25 00000000         
   26 00000000         ;*******************************************************
                       *************************************************
   27 00000000         ;                                          PUBLIC FUNCTI
                       ONS
   28 00000000         ;*******************************************************
                       *************************************************
   29 00000000         ;引用外部变量
   30 00000000                 IMPORT           OSRunning   ; External referenc
                                                            es
   31 00000000                 IMPORT           OSPrioCur
   32 00000000                 IMPORT           OSPrioHighRdy
   33 00000000                 IMPORT           OSTCBCurPtr
   34 00000000                 IMPORT           OSTCBHighRdyPtr
   35 00000000                 IMPORT           OSIntExit
   36 00000000                 IMPORT           OSTaskSwHook
   37 00000000                 IMPORT           OS_CPU_ExceptStkBase
   38 00000000         
   39 00000000         ;声明变量，供外部函数调用
   40 00000000                 EXPORT           OSStartHighRdy ; Functions decl
                                                            ared in this file
   41 00000000         ;EXPORT  OS_CPU_PendSVHandler                           
                           ; 2021.3.1 
   42 00000000                 EXPORT           PendSV_Handler
   43 00000000         
   44 00000000         ;PAGE
   45 00000000         ;*******************************************************



ARM Macro Assembler    Page 2 


                       *************************************************
   46 00000000         ;                                               EQUATES
   47 00000000         ;*******************************************************
                       *************************************************
   48 00000000         ;寄存器宏定义
   49 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; Interrupt control
                                                             state register.
   50 00000000 E000ED22 
                       NVIC_SYSPRI14
                               EQU              0xE000ED22  ; System priority r
                                                            egister (priority 1
                                                            4).
   51 00000000 0000FFFF 
                       NVIC_PENDSV_PRI
                               EQU              0xFFFF      ; PendSV priority v
                                                            alue (lowest).
   52 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; Value to trigger 
                                                            PendSV exception.
   53 00000000         
   54 00000000         
   55 00000000         ;*******************************************************
                       *************************************************
   56 00000000         ;                                     CODE GENERATION DI
                       RECTIVES
   57 00000000         ;*******************************************************
                       *************************************************
   58 00000000         
   59 00000000                 PRESERVE8
   60 00000000                 THUMB
   61 00000000         
   62 00000000                 AREA             CODE, CODE, READONLY
   63 00000000         
   64 00000000         
   65 00000000         ;PAGE
   66 00000000         ;*******************************************************
                       *************************************************
   67 00000000         ;                                         START MULTITAS
                       KING
   68 00000000         ;                                      void OSStartHighR
                       dy(void)
   69 00000000         ;
   70 00000000         ; Note(s) : 1) This function triggers a PendSV exception
                        (essentially, causes a context switch) to cause
   71 00000000         ;              the first task to start.
   72 00000000         ;
   73 00000000         ;           2) OSStartHighRdy() MUST:
   74 00000000         ;              a) Setup PendSV exception priority to low
                       est;
   75 00000000         ;              b) Set initial PSP to 0, to tell context 
                       switcher this is first run;
   76 00000000         ;              c) Set the main stack to OS_CPU_ExceptStk
                       Base
   77 00000000         ;              d) Trigger PendSV exception;
   78 00000000         ;              e) Enable interrupts (tasks will run with
                        interrupts enabled).



ARM Macro Assembler    Page 3 


   79 00000000         ;*******************************************************
                       *************************************************
   80 00000000         
   81 00000000         OSStartHighRdy
   82 00000000 4818            LDR              R0, =NVIC_SYSPRI14 ; Set the Pe
                                                            ndSV exception prio
                                                            rity
   83 00000002 F64F 71FF       LDR              R1, =NVIC_PENDSV_PRI
   84 00000006 7001            STRB             R1, [R0]
   85 00000008         
   86 00000008 2000            MOVS             R0, #0      ; Set the PSP to 0 
                                                            for initial context
                                                             switch call
   87 0000000A F380 8809       MSR              PSP, R0
   88 0000000E         
   89 0000000E 4816            LDR              R0, =OS_CPU_ExceptStkBase ; Ini
                                                            tialize the MSP to 
                                                            the OS_CPU_ExceptSt
                                                            kBase
   90 00000010 6801            LDR              R1, [R0]
   91 00000012 F381 8808       MSR              MSP, R1
   92 00000016         
   93 00000016 4815            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
   94 00000018 F04F 5180       LDR              R1, =NVIC_PENDSVSET
   95 0000001C 6001            STR              R1, [R0]
   96 0000001E         
   97 0000001E B662            CPSIE            I           ; Enable interrupts
                                                             at processor level
                                                            
   98 00000020         
   99 00000020         OSStartHang
  100 00000020 E7FE            B                OSStartHang ; Should never get 
                                                            here
  101 00000022         
  102 00000022         
  103 00000022         ;OSCtxSw
  104 00000022         ;   LDR R0, =NVIC_INT_CTRL
  105 00000022         ;  LDR R1, =NVIC_PENDSVSET
  106 00000022         ; STR R1, [R0]
  107 00000022         ;BX  LR
  108 00000022         
  109 00000022         ;OSIntCtxSw
  110 00000022         ;   LDR R0, =NVIC_INT_CTRL
  111 00000022         ;  LDR R1, =NVIC_PENDSVSET
  112 00000022         ; STR R1, [R0]
  113 00000022         ;BX  LR
  114 00000022         
  115 00000022         ;PAGE
  116 00000022         ;*******************************************************
                       *************************************************
  117 00000022         ;                                       HANDLE PendSV EX
                       CEPTION
  118 00000022         ;                                   void OS_CPU_PendSVHa
                       ndler(void)
  119 00000022         ;
  120 00000022         ; Note(s) : 1) PendSV is used to cause a context switch.



ARM Macro Assembler    Page 4 


                         This is a recommended method for performing
  121 00000022         ;              context switches with Cortex-M3.  This is
                        because the Cortex-M3 auto-saves half of the
  122 00000022         ;              processor context on any exception, and r
                       estores same on return from exception.  So only
  123 00000022         ;              saving of R4-R11 is required and fixing u
                       p the stack pointers.  Using the PendSV exception
  124 00000022         ;              this way means that context saving and re
                       storing is identical whether it is initiated from
  125 00000022         ;              a thread or occurs due to an interrupt or
                        exception.
  126 00000022         ;
  127 00000022         ;           2) Pseudo-code is:
  128 00000022         ;              a) Get the process SP, if 0 then skip (go
                       to d) the saving part (first context switch);
  129 00000022         ;              b) Save remaining regs r4-r11 on process 
                       stack;
  130 00000022         ;              c) Save the process SP in its TCB, OSTCBC
                       urPtr->OSTCBStkPtr = SP;
  131 00000022         ;              d) Call OSTaskSwHook();
  132 00000022         ;              e) Get current high priority, OSPrioCur =
                        OSPrioHighRdy;
  133 00000022         ;              f) Get current ready thread TCB, OSTCBCur
                       Ptr = OSTCBHighRdyPtr;
  134 00000022         ;              g) Get new process SP from TCB, SP = OSTC
                       BHighRdyPtr->OSTCBStkPtr;
  135 00000022         ;              h) Restore R4-R11 from new process stack;
                       
  136 00000022         ;              i) Perform exception return which will re
                       store remaining context.
  137 00000022         ;
  138 00000022         ;           3) On entry into PendSV handler:
  139 00000022         ;              a) The following have been saved on the p
                       rocess stack (by processor):
  140 00000022         ;                 xPSR, PC, LR, R12, R0-R3
  141 00000022         ;              b) Processor mode is switched to Handler 
                       mode (from Thread mode)
  142 00000022         ;              c) Stack is Main stack (switched from Pro
                       cess stack)
  143 00000022         ;              d) OSTCBCurPtr      points to the OS_TCB 
                       of the task to suspend
  144 00000022         ;                 OSTCBHighRdyPtr  points to the OS_TCB 
                       of the task to resume
  145 00000022         ;
  146 00000022         ;           4) Since PendSV is set to lowest priority in
                        the system (by OSStartHighRdy() above), we
  147 00000022         ;              know that it will only be run when no oth
                       er exception or interrupt is active, and
  148 00000022         ;              therefore safe to assume that context bei
                       ng switched out was using the process stack (PSP).
  149 00000022         ;*******************************************************
                       *************************************************
  150 00000022         
  151 00000022         ;OS_CPU_PendSVHandler
  152 00000022         PendSV_Handler
  153 00000022 B672            CPSID            I           ; Prevent interrupt
                                                            ion during context 
                                                            switch
  154 00000024 F3EF 8009       MRS              R0, PSP     ; PSP is process st



ARM Macro Assembler    Page 5 


                                                            ack pointer
  155 00000028 B128            CBZ              R0, PendSVHandler_nosave ; Skip
                                                             register save the 
                                                            first time
  156 0000002A         
  157 0000002A 3820            SUBS             R0, R0, #0x20 ; Save remaining 
                                                            regs r4-11 on proce
                                                            ss stack
  158 0000002C E880 0FF0       STM              R0, {R4-R11}
  159 00000030         
  160 00000030 490F            LDR              R1, =OSTCBCurPtr ; OSTCBCurPtr-
                                                            >OSTCBStkPtr = SP;
  161 00000032 6809            LDR              R1, [R1]
  162 00000034 6008            STR              R0, [R1]    ; R0 is SP of proce
                                                            ss being switched o
                                                            ut
  163 00000036         
  164 00000036         ; At this point, entire context of process has been save
                       d
  165 00000036         PendSVHandler_nosave
  166 00000036 B500            PUSH             {R14}       ; Save LR exc_retur
                                                            n value
  167 00000038 480E            LDR              R0, =OSTaskSwHook 
                                                            ; OSTaskSwHook();
  168 0000003A 4780            BLX              R0
  169 0000003C F85D EB04       POP              {R14}
  170 00000040         
  171 00000040 480D            LDR              R0, =OSPrioCur ; OSPrioCur   = 
                                                            OSPrioHighRdy;
  172 00000042 490E            LDR              R1, =OSPrioHighRdy
  173 00000044 780A            LDRB             R2, [R1]
  174 00000046 7002            STRB             R2, [R0]
  175 00000048         
  176 00000048 4809            LDR              R0, =OSTCBCurPtr ; OSTCBCurPtr 
                                                            = OSTCBHighRdyPtr;
  177 0000004A 490D            LDR              R1, =OSTCBHighRdyPtr
  178 0000004C 680A            LDR              R2, [R1]
  179 0000004E 6002            STR              R2, [R0]
  180 00000050         
  181 00000050 6810            LDR              R0, [R2]    ; R0 is new process
                                                             SP; SP = OSTCBHigh
                                                            RdyPtr->StkPtr;
  182 00000052 E890 0FF0       LDM              R0, {R4-R11} ; Restore r4-11 fr
                                                            om new process stac
                                                            k
  183 00000056 3020            ADDS             R0, R0, #0x20
  184 00000058 F380 8809       MSR              PSP, R0     ; Load PSP with new
                                                             process SP
  185 0000005C F04E 0E04       ORR              LR, LR, #0x04 ; Ensure exceptio
                                                            n return uses proce
                                                            ss stack
  186 00000060 B662            CPSIE            I
  187 00000062 4770            BX               LR          ; Exception return 
                                                            will restore remain
                                                            ing context
  188 00000064         
  189 00000064                 END
              E000ED22 
              00000000 



ARM Macro Assembler    Page 6 


              E000ED04 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=..\obj\os_cpu_a.d -o..\obj\os_cpu_a.o -I.\RTE\_UCOSIII -IC:\Users\
Zen\AppData\Local\Arm\Packs\Keil\STM32F1xx_DFP\2.3.0\Device\Include -IC:\Keil_v
5\ARM\CMSIS\Include --predefine="__UVISION_VERSION SETA 529" --predefine="STM32
F10X_HD SETA 1" --list=.\listings\os_cpu_a.lst ..\UCOSIII\uCOS-III\Ports\os_cpu
_a.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

CODE 00000000

Symbol: CODE
   Definitions
      At line 62 in file ..\UCOSIII\uCOS-III\Ports\os_cpu_a.s
   Uses
      None
Comment: CODE unused
OSStartHang 00000020

Symbol: OSStartHang
   Definitions
      At line 99 in file ..\UCOSIII\uCOS-III\Ports\os_cpu_a.s
   Uses
      At line 100 in file ..\UCOSIII\uCOS-III\Ports\os_cpu_a.s
Comment: OSStartHang used once
OSStartHighRdy 00000000

Symbol: OSStartHighRdy
   Definitions
      At line 81 in file ..\UCOSIII\uCOS-III\Ports\os_cpu_a.s
   Uses
      At line 40 in file ..\UCOSIII\uCOS-III\Ports\os_cpu_a.s
Comment: OSStartHighRdy used once
PendSVHandler_nosave 00000036

Symbol: PendSVHandler_nosave
   Definitions
      At line 165 in file ..\UCOSIII\uCOS-III\Ports\os_cpu_a.s
   Uses
      At line 155 in file ..\UCOSIII\uCOS-III\Ports\os_cpu_a.s
Comment: PendSVHandler_nosave used once
PendSV_Handler 00000022

Symbol: PendSV_Handler
   Definitions
      At line 152 in file ..\UCOSIII\uCOS-III\Ports\os_cpu_a.s
   Uses
      At line 42 in file ..\UCOSIII\uCOS-III\Ports\os_cpu_a.s
Comment: PendSV_Handler used once
5 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 49 in file ..\UCOSIII\uCOS-III\Ports\os_cpu_a.s
   Uses
      At line 93 in file ..\UCOSIII\uCOS-III\Ports\os_cpu_a.s
Comment: NVIC_INT_CTRL used once
NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 52 in file ..\UCOSIII\uCOS-III\Ports\os_cpu_a.s
   Uses
      At line 94 in file ..\UCOSIII\uCOS-III\Ports\os_cpu_a.s
Comment: NVIC_PENDSVSET used once
NVIC_PENDSV_PRI 0000FFFF

Symbol: NVIC_PENDSV_PRI
   Definitions
      At line 51 in file ..\UCOSIII\uCOS-III\Ports\os_cpu_a.s
   Uses
      At line 83 in file ..\UCOSIII\uCOS-III\Ports\os_cpu_a.s
Comment: NVIC_PENDSV_PRI used once
NVIC_SYSPRI14 E000ED22

Symbol: NVIC_SYSPRI14
   Definitions
      At line 50 in file ..\UCOSIII\uCOS-III\Ports\os_cpu_a.s
   Uses
      At line 82 in file ..\UCOSIII\uCOS-III\Ports\os_cpu_a.s
Comment: NVIC_SYSPRI14 used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

OSIntExit 00000000

Symbol: OSIntExit
   Definitions
      At line 35 in file ..\UCOSIII\uCOS-III\Ports\os_cpu_a.s
   Uses
      None
Comment: OSIntExit unused
OSPrioCur 00000000

Symbol: OSPrioCur
   Definitions
      At line 31 in file ..\UCOSIII\uCOS-III\Ports\os_cpu_a.s
   Uses
      At line 171 in file ..\UCOSIII\uCOS-III\Ports\os_cpu_a.s
Comment: OSPrioCur used once
OSPrioHighRdy 00000000

Symbol: OSPrioHighRdy
   Definitions
      At line 32 in file ..\UCOSIII\uCOS-III\Ports\os_cpu_a.s
   Uses
      At line 172 in file ..\UCOSIII\uCOS-III\Ports\os_cpu_a.s
Comment: OSPrioHighRdy used once
OSRunning 00000000

Symbol: OSRunning
   Definitions
      At line 30 in file ..\UCOSIII\uCOS-III\Ports\os_cpu_a.s
   Uses
      None
Comment: OSRunning unused
OSTCBCurPtr 00000000

Symbol: OSTCBCurPtr
   Definitions
      At line 33 in file ..\UCOSIII\uCOS-III\Ports\os_cpu_a.s
   Uses
      At line 160 in file ..\UCOSIII\uCOS-III\Ports\os_cpu_a.s
      At line 176 in file ..\UCOSIII\uCOS-III\Ports\os_cpu_a.s

OSTCBHighRdyPtr 00000000

Symbol: OSTCBHighRdyPtr
   Definitions
      At line 34 in file ..\UCOSIII\uCOS-III\Ports\os_cpu_a.s
   Uses
      At line 177 in file ..\UCOSIII\uCOS-III\Ports\os_cpu_a.s
Comment: OSTCBHighRdyPtr used once
OSTaskSwHook 00000000

Symbol: OSTaskSwHook
   Definitions
      At line 36 in file ..\UCOSIII\uCOS-III\Ports\os_cpu_a.s
   Uses
      At line 167 in file ..\UCOSIII\uCOS-III\Ports\os_cpu_a.s
Comment: OSTaskSwHook used once
OS_CPU_ExceptStkBase 00000000




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

Symbol: OS_CPU_ExceptStkBase
   Definitions
      At line 37 in file ..\UCOSIII\uCOS-III\Ports\os_cpu_a.s
   Uses
      At line 89 in file ..\UCOSIII\uCOS-III\Ports\os_cpu_a.s
Comment: OS_CPU_ExceptStkBase used once
8 symbols
351 symbols in table
